import midi

class Note(object):
    fullNoteDuration = 200
    def __init__(self, pitch=midi.C_5,dot=False):
        self.duration = duration
        self.pitch = pitch
        #self.image = image
        self.loudness = 100
        self.dot = dot
    def playNote(self, track):
        # play audio file *pitch* for self.duration time
        # if the note is dotted, the duration is extended by half
        if self.dot:
            duration = self.duration*1.5
        else:
            duration = self.duration
        on = midi.NoteOnEvent(tick=0, velocity=self.loudness, pitch=self.pitch)
        track.append(on)
        off = midi.NoteOffEvent(tick=duration, pitch=self.pitch)
        track.append(off)

"""
pattern = midi.Pattern()
track = midi.Track()
pattern.append(track)
noteList = []
noteList.append(Note(200,0,midi.C_5))
noteList.append(Note(200,0,midi.D_5))
noteList.append(Note(200,0,midi.E_5))
noteList.append(Note(200,0,midi.F_5))
noteList.append(Note(200,0,midi.G_5))
for note in noteList:
    note.playNote(track)
eot = midi.EndOfTrackEvent(tick=1)
track.append(eot)
midi.write_midifile("testNoteClass.mid", pattern)
"""

class FullNote(Note):
    duration = Note.fullNoteDuration

class HalfNote(Note):
    duration = Note.fullNoteDuration/2
    
class QuarterNote(Note):
    duration = Note.fullNoteDuration/4
    
class EighthNote(Note):
    duration = Note.fullNoteDuration/8
    
class Rest(Note):
    def __init__(self, pitch=midi.C_5):
        super().__init__(self,pitch)
        self.loudness = 0
        
class FullRest(Rest):
    duration = Note.fullNoteDuration

class HalfRest(Rest):
    duration = Note.fullNoteDuration/2
    
class QuarterRest(Rest):
    duration = Note.fullNoteDuration/4
    
class EighthRest(Rest):
    duration = Note.fullNoteDuration/8
